# Escriba aquí su función reg_gen_expression
tdataset <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC"),
GAPDH <- filter(df_long, dataset == "GAPDH")
)
GCA <- list (
BRCA_1 <- BRCA %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
OV_1 <- OV %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
LUSC_1 <- LUSC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIPAN_1 <- KIPAN %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIRP_1 <- KIRP %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
UCEC_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
GAPH_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
)
setwd("D:/Documentos/GitHub/GBI6_ExamenFinal")
library(readr)
df <- read_csv("./data/mRNA_expr.csv")
head(df)
# Escriba aquí la función long_df
long_df <- function(df) {
library(tidyr)
library(dplyr)
df$dataset <- as.factor(df$dataset)
df_l <- gather(df, gen, expresion_level, GATA3, PTEN, XBP1, ESR1, MUC1, FN1, GAPDH, factor_key=TRUE)
df_l2 <- select(df_l, -bcr_patient_barcode)
return (df_l2)
}
# Genere la data df_long
library(dplyr)
df_long <- long_df(df)
tablaDes <- df_long %>% group_by(gen)
tablaDes
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
CAMama <- tablaDes %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(CAMama) %>% tab_df(title = "Estadistica descriptiva del cáncer de MAMA y su nivel de expresion en los genes",
file = "D:/Documentos/GitHub/GBI6_ExamenFinal/results/mRNA_expr_summary.doc")
setwd("D:/Documentos/GitHub/GBI6_ExamenFinal")
library(readr)
df <- read_csv("./data/mRNA_expr.csv")
head(df)
# Escriba aquí la función long_df
long_df <- function(df) {
library(tidyr)
library(dplyr)
df$dataset <- as.factor(df$dataset)
df_l <- gather(df, gen, expresion_level, GATA3, PTEN, XBP1, ESR1, MUC1, FN1, GAPDH, factor_key=TRUE)
df_l2 <- select(df_l, -bcr_patient_barcode)
return (df_l2)
}
# Genere la data df_long
library(dplyr)
df_long <- long_df(df)
tablaDes <- df_long %>% group_by(gen)
tablaDes
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
CAMama <- tablaDes %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(CAMama) %>% tab_df(title = "Estadistica descriptiva del cáncer de MAMA y su nivel de expresion en los genes",
file = "D:/Documentos/GitHub/GBI6_ExamenFinal/results/mRNA_expr_summary.doc")
# Escriba aquí su función reg_gen_expression
tdataset <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC"),
GAPDH <- filter(df_long, dataset == "GAPDH")
)
GCA <- list (
BRCA_1 <- BRCA %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
OV_1 <- OV %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
LUSC_1 <- LUSC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIPAN_1 <- KIPAN %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIRP_1 <- KIRP %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
UCEC_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
GAPH_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
)
# Escriba el código para generar la lista.
E_G_R <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancerr, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba aquí su función reg_gen_expression
tdataset <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC"),
GAPDH <- filter(df_long, dataset == "GAPDH")
)
GCA <- list (
BRCA_1 <- BRCA %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
OV_1 <- OV %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
LUSC_1 <- LUSC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIPAN_1 <- KIPAN %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIRP_1 <- KIRP %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
UCEC_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
GAPH_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
)
# Escriba el código para generar la lista.
E_G_R <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancerr, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para guardar el onceavo plot.
GCA <- E_G_R("GATA3")
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- E_G_R("GATA3")
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- E_G_R("GATA3")
# Escriba el código para guardar el onceavo plot.
GCA <- E_G_R("GATA3")
# Escriba aquí su función reg_gen_expression
tdataset <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC"),
GAPDH <- filter(df_long, dataset == "GAPDH")
)
graficoscancer <- list (
BRCA_1 <- BRCA %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
OV_1 <- OV %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
LUSC_1 <- LUSC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIPAN_1 <- KIPAN %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIRP_1 <- KIRP %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
UCEC_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
GAPH_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
)
# Escriba el código para generar la lista.
E_G_R <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancerr, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(graficoscancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para guardar el onceavo plot.
GCA <- E_G_R("GATA3")
GCA[[5]][[2]]
ggsave("D:/Documentos/GitHub/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 8, dpi = 300)
